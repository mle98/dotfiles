let mapleader=" "

set scrolloff=8

" Do incremental searching.
set incsearch

Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
" Plug 'justinmk/vim-sneak'
Plug 'terryma/vim-multiple-cursors'

set ideajoin
set rnu
set clipboard+=unnamedplus
set which-key
set mini-ai
set sneak 

" navigation mapping inside file
nmap n nzzzv
nmap N Nzzzv
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz

" undo redo
nmap U <C-R>

" easy sourcing
nnoremap <Leader>m :source ~/.ideavimrc

" buffer operations
xmap <leader>p \"_dP
nmap <leader>d \"_d
vmap <leader>d \"_d
nmap <leader>c \"_c
vmap <leader>c \"_c

"misc
nmap Q <nop>

"refactoring
xmap <Leader>rr <Action>(RenameElement)
map <Leader>rr <Action>(RenameElement)
xmap <Leader>rm <Action>(ExtractMethod)
xmap <Leader>rv <Action>(IntroduceVariable)
xmap <Leader>rf <Action>(IntroduceField)
xmap <Leader>rc <Action>(IntroduceConstant)

" multiselection
nmap <M-n> <Plug>NextWholeOccurrence
xmap <M-n> <Plug>NextWholeOccurrence
nmap <leader><M-n> <Plug>AllWholeOccurrences
xmap <leader><M-n> <Plug>AllWholeOccurrences
xmap <M-p> <Plug>RemoveOccurrence

" note about mini-ai
" this enables for vi(i(i( to expand the selection of ( scopes
" works on other text objects too!

" navigation
nmap <leader>ji <Action>(GotoImplementation)
nmap <leader>jd <Action>(GotoDeclaration)
nmap <leader>ju <Action>(FindUsages)
nmap <leader>oe <Action>(RecentFiles)
nmap <leader>ol <Action>(RecentLocations)
nmap <leader>of <Action>(GotoFile)
nmap <M-j> <Action>(MethodDown)
nmap <M-k> <Action>(MethodUp)

" harpoon
nmap <leader><S-j> <Action>(SetFile1)
nmap <leader><S-k> <Action>(SetFile2)
nmap <leader><S-l> <Action>(SetFile3)
nmap <leader><S-;> <Action>(SetFile4)
nmap <leader>j <Action>(OpenFile1)
nmap <leader>k <Action>(OpenFile2)
nmap <leader>l <Action>(OpenFile3)
nmap <leader>; <Action>(OpenFile4)
